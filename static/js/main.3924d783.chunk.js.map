{"version":3,"sources":["ESCExchange.js","ETHExchange.js","God.js","App.js","serviceWorker.js","index.js"],"names":["ESCExchange","abi","JSON","parse","address","wethTokenABI","wethTokenAddress","ETHExchange","God","theEth","theWeb3","_theAccount","API","_contractInput","_contractOutput","_contractWETH","_networkId","onChangeNetwork","func","getNetwork","work","callback","this","eth","net","getNetworkType","then","network","getId","id","getAccount","getAccounts","accounts","getBalanceOfToken","getTokenContract","methods","balanceOf","call","balance","getBalanceOfETH","getBalance","utils","fromWei","Contract","getInputContract","transfer","num","doneCallback","sendTransaction","from","to","value","toWei","String","error","hash","console","on","receipt","transactionHash","requestAPI","tx","howMuch","errorCallback","s","axios","get","response","data","status","i","toBN","result","amount","token_address","catch","getOutputContract","withdraw","args","a","mintToken","txid","nonce","v","r","estimateGas","gas","send","App","useState","me","setMe","setNet","setBalance","meELA","setMeELA","netELA","setNetELA","balanceELA","setBalanceELA","balanceToken","setBalanceToken","useEthereum","setUseEthereum","ETHInput","setETHInput","isStep2","setIsStep2","red","setRed","choiceNetwork","account","openNotification","res","newBalance","url","title","description","notification","open","message","onClick","useEffect","window","ethereum","enable","Web3","givenProvider","autoRefreshOnNetworkChange","style","marginLeft","className","height","src","onChange","event","currentTarget","placeholder","step","type","disabled","color","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3924d783.chunk.js","sourcesContent":["const ESCExchange = {\n\tabi: JSON.parse('[ { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"name\": \"addressMapping\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"param1\", \"type\": \"address\" }, { \"name\": \"param2\", \"type\": \"address\" }, { \"name\": \"param3\", \"type\": \"uint256\" }, { \"name\": \"param4\", \"type\": \"uint256\" } ], \"name\": \"reserve3\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_implementation\", \"type\": \"address\" } ], \"name\": \"upgrade\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" }, { \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"seenNonces\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"txid\", \"type\": \"uint256\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"amount\", \"type\": \"uint256\" }, { \"name\": \"_nonce\", \"type\": \"uint256[]\" }, { \"name\": \"v\", \"type\": \"uint8[]\" }, { \"name\": \"r\", \"type\": \"bytes32[]\" }, { \"name\": \"s\", \"type\": \"bytes32[]\" } ], \"name\": \"withdrawEth\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"name\": \"reserve_address_uint256\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_fee\", \"type\": \"uint256\" } ], \"name\": \"setFeeRate\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"oracles\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"name\": \"totalFee\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"name\": \"reserve_address_address\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"reserve_uint256_bool\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"MAX_ORACLES_PARTYES\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"token_address\", \"type\": \"address\" }, { \"name\": \"txid\", \"type\": \"uint256\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"amount\", \"type\": \"uint256\" }, { \"name\": \"_nonce\", \"type\": \"uint256[]\" }, { \"name\": \"v\", \"type\": \"uint8[]\" }, { \"name\": \"r\", \"type\": \"bytes32[]\" }, { \"name\": \"s\", \"type\": \"bytes32[]\" } ], \"name\": \"mintToken\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"transactions\", \"outputs\": [ { \"name\": \"destination\", \"type\": \"address\" }, { \"name\": \"value\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"implementation_slot\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"ethTokenAddress\", \"type\": \"address\" }, { \"name\": \"escTokenAddress\", \"type\": \"address\" } ], \"name\": \"setTokenMapping\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"name\": \"isOracle\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"seenTxids\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"transactionCount\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"param1\", \"type\": \"address\" }, { \"name\": \"param2\", \"type\": \"uint256\" } ], \"name\": \"reserve\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_required\", \"type\": \"uint256\" } ], \"name\": \"changeRequired\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"param1\", \"type\": \"address\" }, { \"name\": \"param2\", \"type\": \"address\" }, { \"name\": \"param3\", \"type\": \"uint256\" } ], \"name\": \"reserve2\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"required\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"fee\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_oracle\", \"type\": \"address\" } ], \"name\": \"addOracle\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"admin\", \"outputs\": [ { \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"_oracle\", \"type\": \"address\" } ], \"name\": \"removeOracle\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"_oracles\", \"type\": \"address[]\" }, { \"name\": \"_required\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"fallback\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Execution\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ExecutionFailure\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"fee\", \"type\": \"uint256\" } ], \"name\": \"SetFee\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"tokenAddress\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"account\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"MintToken\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"ethTokenAddress\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"escTokenAddress\", \"type\": \"address\" } ], \"name\": \"SetTokenMapping\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"name\": \"_required\", \"type\": \"uint256\" } ], \"name\": \"RequirementChange\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"_oracle\", \"type\": \"address\" } ], \"name\": \"OracleRemoval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"_oracle\", \"type\": \"address\" } ], \"name\": \"OracleAdded\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"name\": \"txid\", \"type\": \"uint256\" } ], \"name\": \"TxidVerified\", \"type\": \"event\" } ]'),\n\taddress: '0xb861A223A527e264B31244E2A8448Ba4D99d3E31',\n\twethTokenABI: JSON.parse('[ { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"value\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"subtractedValue\", \"type\": \"uint256\" } ], \"name\": \"decreaseAllowance\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"addedValue\", \"type\": \"uint256\" } ], \"name\": \"increaseAllowance\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"recipient\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sender\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"recipient\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"initialSupply\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"constant\": true, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" } ]'),\n\twethTokenAddress: \"0xeac3BD24AA8F3CBc3f5908c5690489Bce851C28E\"\n}\n\nexport default ESCExchange","const ETHExchange = {\n\tabi: JSON.parse('[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seenNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txid\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ORACLES_PARTYES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_address\",\"type\":\"address\"},{\"name\":\"txid\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethTokenAddress\",\"type\":\"address\"},{\"name\":\"escTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenMapping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seenTxids\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"_oracles\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"escTokenAddress\",\"type\":\"address\"}],\"name\":\"SetTokenMapping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txid\",\"type\":\"uint256\"}],\"name\":\"TxidVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]'),\n\taddress: '0x1944FF7cA3ae67a06Ee164a690c8B291e7Fae9d1'\n}\n\nexport default ETHExchange","import ESCExchange from './ESCExchange'\nimport ETHExchange from \"./ETHExchange\"\nimport axios from 'axios'\n\nconst God = {\n\ttheEth: null,\n\ttheWeb3: null,\n\t_theAccount: '',\n\t// API: 'https://dev.elapp.org/api/v1/oracle/signature',\n\t// API: 'http://localhost:8080/api/v1/oracle/signature',\n\tAPI: 'http://45.32.134.69:8089/api/v1/oracle/signature',\n\t_contractInput: null,\n\t_contractOutput: null,\n\t_contractWETH: null,\n\t_networkId: 0,\n\n\tonChangeNetwork: function (func) {\n\t\tfunc()\n\t},\n\n\tgetNetwork: function (work, callback) {\n\t\tthis.theWeb3.eth.net.getNetworkType().then(network => {\n\t\t\tif (network === 'rinkeby') {\n\t\t\t\tthis.theWeb3.eth.net.getId().then(id => {\n\t\t\t\t\tif (id === 4) {\n\t\t\t\t\t\treturn callback(network)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else if (network === 'private') {\n\t\t\t\t// Elastos Test network.\n\t\t\t\tthis.theWeb3.eth.net.getId().then(id => {\n\t\t\t\t\treturn callback('Elastos Test network')\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t},\n\n\tgetAccount: function (callback) {\n\t\tthis.theWeb3.eth.getAccounts().then(accounts => {\n\t\t\tthis._theAccount = accounts[0]\n\t\t\treturn callback(this._theAccount)\n\t\t})\n\t},\n\n\tgetBalanceOfToken: function (callback) {\n\t\tthis.getTokenContract().methods.balanceOf(this._theAccount).call().then(balance => {\n\t\t\treturn callback(balance)\n\t\t})\n\t},\n\n\tgetBalanceOfETH: function (callback) {\n\t\tthis.theWeb3.eth.getBalance(this._theAccount).then(balance => {\n\t\t\treturn callback(this.theWeb3.utils.fromWei(balance, 'ether'))\n\t\t})\n\t},\n\n\tgetTokenContract: function () {\n\t\tif (!this._contractWETH) {\n\t\t\tthis._contractWETH = new this.theWeb3.eth.Contract(ESCExchange.wethTokenABI, ESCExchange.wethTokenAddress)\n\t\t}\n\n\t\treturn this._contractWETH\n\t},\n\n\tgetInputContract: function () {\n\t\tif (!this._contractInput) {\n\t\t\tthis._contractInput = new this.theWeb3.eth.Contract(ETHExchange.abi, ETHExchange.address)\n\t\t}\n\t\treturn this._contractInput\n\t},\n\n\ttransfer: function (num, callback, doneCallback) {\n\t\tthis.theWeb3.eth.sendTransaction({\n\t\t\tfrom: this._theAccount,\n\t\t\tto: ETHExchange.address,\n\t\t\tvalue: this.theWeb3.utils.toWei(String(num), 'ether')\n\t\t}, (error, hash) => {\n\t\t\tif (error) {\n\t\t\t\treturn console.error(error)\n\t\t\t} else {\n\t\t\t\treturn callback(hash)\n\t\t\t}\n\t\t}).on('receipt', function (receipt) {\n\t\t\treturn doneCallback(receipt.transactionHash)\n\t\t})\n\t},\n\n\trequestAPI: function (tx, howMuch, callback, errorCallback) {\n\t\tconst s = this.API + '?txid=' + tx + '&chain_type=ETH'\n\n\t\taxios.get(s).then(response => {\n\t\t\tif (response.data.status === 200) {\n\t\t\t\tlet i = howMuch * 160\n\t\t\t\tif (i < 1) {\n\t\t\t\t\ti = 1\n\t\t\t\t}\n\t\t\t\ti = this.theWeb3.utils.toBN(i)\n\n\t\t\t\treturn callback({\n\t\t\t\t\t...response.data.result,\n\t\t\t\t\tamount: i,\n\t\t\t\t\ttoken_address: ETHExchange.address\n\t\t\t\t})\n\t\t\t}\n\t\t}).catch(function (error) {\n\t\t\tconsole.error(error);\n\t\t\treturn errorCallback(s)\n\t\t}).then(function () { })\n\t},\n\n\tgetOutputContract: function () {\n\t\tif (!this._contractOutput) {\n\t\t\tthis._contractOutput = new this.theWeb3.eth.Contract(ESCExchange.abi, ESCExchange.address)\n\t\t}\n\n\t\treturn this._contractOutput\n\t},\n\n\t/**\n\t * 提币操作。\n\t * @param {Object} args 参数对象。\n\t * @param {Function} callback 成功后回调。\n\t */\n\twithdraw: async function (args, callback) {\n\t\tconst func = this.getOutputContract().methods.mintToken(\n\t\t\targs.token_address,\n\t\t\targs.txid,\n\t\t\targs.to,\n\t\t\targs.amount,\n\t\t\t[args.nonce],\n\t\t\t[args.v],\n\t\t\t[args.r],\n\t\t\t[args.s]\n\t\t)\n\n\t\tfunc.estimateGas({ from: this._theAccount }).then(gas => {\n\t\t\tfunc.send({\n\t\t\t\tfrom: this._theAccount,\n\t\t\t\tgas: gas\n\t\t\t}).on('transactionHash', function (hash) {\n\t\t\t\treturn callback(hash)\n\t\t\t}).on(\n\t\t\t\t'receipt', function (receipt) {\n\t\t\t\t\treturn callback()\n\t\t\t\t})\n\t\t})\n\t}\n}\n\nexport default God","import React, { useState, useEffect } from 'react';\nimport God from './God'\nimport Web3 from 'web3'\nimport { notification } from 'antd'\nimport './App.css'\nimport '../node_modules/antd/dist/antd.css'\n\nlet transactionHash = ''\n\nfunction App() {\n\n  const [me, setMe] = useState('')\n  const [net, setNet] = useState('')\n  const [balance, setBalance] = useState(0)\n  const [meELA, setMeELA] = useState('')\n  const [netELA, setNetELA] = useState('')\n  const [balanceELA, setBalanceELA] = useState(0)\n  const [balanceToken, setBalanceToken] = useState(0)\n  const [useEthereum, setUseEthereum] = useState(true)\n  const [ETHInput, setETHInput] = useState(0.0001)\n  const [isStep2, setIsStep2] = useState(false)\n  const [red, setRed] = useState(false)\n\n  /**\n   * 因为是测试模拟流程，所以没有实现基于web3的新建帐户或导入已有帐户私钥等功能，暂时先基于Metamask浏览器插件运行。\n   * 初始化时连接Metamask后，使用Metamask封装的web3进行链的操作。\n\t */\n  const init = () => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.enable()\n\n      God.theWeb3 = new Web3(Web3.givenProvider)\n      God.theEth = window.ethereum\n\n      window.ethereum.autoRefreshOnNetworkChange = false\n      window.ethereum.on('networkChanged', network => {\n        choiceNetwork()\n      })\n    }\n\n    openNotification('初始化', '请确保 Metamask 的当前 Network 是 Rinkeby Test Network。')\n    choiceNetwork()\n  }\n\n  const choiceNetwork = () => {\n    God.getNetwork(useEthereum, network => {\n      if (network === 'Elastos Test network') {\n        setUseEthereum(false)\n        setNetELA(network)\n\n        God.getAccount(account => {\n          setMeELA(account)\n\n          God.getBalanceOfETH(eth => {\n            setBalanceELA(eth)\n\n            God.getBalanceOfToken(balance => {\n              setBalanceToken(balance)\n\n              if (transactionHash !== '') {\n                openNotification('签名接口', '正在请求签名接口……')\n\n                const tx = transactionHash\n                transactionHash = ''\n\n                God.requestAPI(tx, ETHInput, result => {\n                  if (result) {\n                    openNotification('签名接口', '取得签名数据。正在兑换指定Token')\n\n                    God.withdraw(result, res => {\n                      if (res) {\n                        openNotification('Elastos Testnet', '兑换交易（' + res + '）正在等待节点确认……')\n                      } else {\n                        openNotification('Elastos Testnet', '兑换交易已确认，正在更新持有Token的余额。流程结束。')\n\n                        God.getBalanceOfToken(newBalance => {\n                          setRed(true)\n                          setBalanceToken(newBalance)\n                        })\n                      }\n                    })\n                  }\n                }, url => {\n                  openNotification('签名接口', '请求接口失败。请联系接口开发者。')\n                })\n              }\n            })\n          })\n        })\n      } else {\n        setUseEthereum(true)\n        setNet(network)\n\n        God.getAccount(account => {\n          setMe(account)\n\n          God.getBalanceOfETH(eth => {\n            setBalance(eth)\n          })\n        })\n      }\n    })\n  }\n\n  const transfer = (num) => {\n    openNotification('Rinkeby Test Network', '正在向指定合约转帐，等待唤起Metamask……')\n\n    God.transfer(num, tx => {\n      openNotification('Rinkeby Test Network', '转帐交易（' + tx + '）正在确认。确认后将会自动进入下一步，请稍候……')\n      transactionHash = tx\n    }, tx => {\n      openNotification('Rinkeby Test Network', '交易已确认。')\n      setIsStep2(true)\n    })\n  }\n\n  const onChangeETHInput = event => {\n    setETHInput(event.currentTarget.value)\n  }\n\n  const openNotification = (title, description) => {\n    notification.open({\n      message: title,\n      description: description,\n      onClick: () => { }\n    })\n  }\n\n  const onClickTransferButton = () => {\n    if (ETHInput > 0) {\n      transfer(ETHInput)\n    }\n  }\n\n  useEffect(init, [])\n\n  return (\n    <div style={{ marginLeft: '1rem' }}>\n      <h1>ETH to ELA</h1>\n\n      <div className=\"infoBlock\">\n        请确保您的Metamask插件中已配置了两个Network:\n        <ol>\n          <li>Rinkeby Test Network：这应该是由Metamask默认已配置好的。</li>\n          <li>Elastos Testnet：需要您手动配置。RPC：https://rpc.elaeth.io</li>\n        </ol>\n      </div>\n\n      <div className=\"block\">\n        <h2>1/3：<img height=\"32px\" src=\"Ethereum.png\" />Rinkeby Test Network</h2>\n\n        <div>\n          <div>\n            <span className=\"label\">当前网络</span>\n            <span>{net}</span>\n          </div>\n\n          <div>\n            <span className=\"label\">当前帐户</span>\n            <span>{me}</span>\n          </div>\n\n          <div>\n            <span className=\"label\">当前余额</span>\n            <span>{balance}</span>\n          </div>\n\n          <div>\n            <span className=\"label\">向合约转帐ETH</span>\n\n            <span>\n              <input\n                onChange={onChangeETHInput}\n                placeholder=\"ether\"\n                step=\"0.01\"\n                type=\"number\" />\n            </span>\n\n            <button\n              disabled={!(ETHInput > 0)}\n              onClick={onClickTransferButton}>转帐</button>\n          </div>\n        </div>\n      </div>\n\n      {isStep2 ? (\n        <div className=\"block\">\n          <h2>2/3：切换到 Elastos Testnet</h2>\n          <div>请在Metamask中将Network切换到Elastos Testnet</div>\n        </div>\n      ) : null}\n\n      {!useEthereum ? (\n        <div className=\"block\">\n          <h2>3/3：<img height=\"32px\" src=\"ELA.png\" />Elastos Testnet</h2>\n\n          <div>\n            <div>\n              <span className=\"label\">当前网络</span>\n              <span>{netELA}</span>\n            </div>\n\n            <div>\n              <span className=\"label\">当前帐户</span>\n              <span>{meELA}</span>\n            </div>\n\n            <div>\n              <span className=\"label\">当前余额</span>\n              <span>{balanceELA}</span>\n            </div>\n\n            <div>\n              <span className=\"label\">目标Token</span>\n              <span>0xeac3BD24AA8F3CBc3f5908c5690489Bce851C28E</span>\n            </div>\n\n            <div>\n              <span className=\"label\">持有Token</span>\n              <span style={{ color: red ? 'red' : 'black' }}>{balanceToken}</span>\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}